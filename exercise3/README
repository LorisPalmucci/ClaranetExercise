Cos'è una CRON STRING?
    è un'espressione che consiste in 6-7 campi che descrivono dei dettagli individuali di un job da schedulare

Quali sono i campi in questione?
    Secondi     ---> da 0 a 59
    Minuti      ---> da 0 a 59
    Hours       ---> da 0 a 23
    DayOfMonth  ---> da 1 a 31
    Month       ---> da 0 a 11
                     da JAN a DEC
    DayOfWeek   ---> da 1 a 7
                     da SUN a SAT
    Year        ---> /
                     da 1970 a 2099

Come è strutturata una CronString?

        # ┌───────────── minute (0 - 59)
        # │ ┌───────────── hour (0 - 23)
        # │ │ ┌───────────── day of the month (1 - 31)
        # │ │ │ ┌───────────── month (1 - 12)
        # │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
        # │ │ │ │ │                                   7 is also Sunday on some systems)
        # │ │ │ │ │
        # │ │ │ │ │
        # * * * * * <command to execute>

    alcuni esempi di Cron String

        0 0 12 * * ?	    Fire at 12:00 PM (noon) 
                            every day
        
        0 0/5 14,18 * * ?	Fire every 5 minutes 
                            starting at 2:00 PM and ending at 2:55 PM, AND 
                            fire every 5 minutes starting at 6:00 PM and 
                            ending at 6:55 PM, every day

        0 15 10 ? * MON-FRI	Fire at 10:15 AM every Monday, Tuesday, Wednesday, 
                            Thursday and Friday

        0 15 10 * * ? 2005	Fire at 10:15 AM every day during the year 2005

    Nei sistemi UNIX-Like si può usare il comando 'cron' da riga di comando perschedulare una serie di attività in modo automatizzato.
    Questi attività sono meglio consociute come CronJob, è quindi possibileimpostare degli intervalli di tempo (giorni, minuti, anni, ore ecc..) in cui il sistema manda in esecuzione questi CronJob allo scopo di eseguire il compito specificato.
    Ad esmpio la seguente CronString esegue la pulizia del Log degli Errori diApache

        1 0 * * * printf "" > /var/log/apache/error_log

    il compito viene eseguito al primo minuto dopo la mezzanotte ogni giorno.
    Ovviamente è possibile mandare in esecuzione degli script come in questo esmpio in cui si avvia una shell:

        45 23 * * 6 /home/oracle/scripts/export_dump.sh

    alle ore 23 e 45 minuti al sesto giorno della settimana (Sabato) viene mandato in esecuzione 'export_dump.sh'.

Il file CRONTAB
    Questo file contiene tutti i comandi che la shell deve eseguire per completare il lavoro rischiesto dallo specifico CrontTab.
    I CronTab sono conservate le liste dei job ed altre istruzione per il 'Demone Cron'. E' possibile per gli utenti avere più profili per le proprie schedulazioni, ma non è possibile modificare il file 'cron.d' del sistema il cui accesso è riservato solo agli amministratori.

COME CREARE UN ESEGUIBILE PER CRONTAB?
    1. Per prima cosa andremo a creare uno script che chiameremo 'job.sh' in cui scriveremo le istruzioni del compito previsto dal nostro job. In questo caso vogliamo creare un nuovo file vuoto che chiameremo log.txt

        touch /home/user/Desktop/log.txt

    2. Come seconda cosa andremo a creare lo script 'scheduleJob.sh' con cui diremo al sistema di aggiungere il compito al file crontab. All'interno di questo file avremo:

        #una copia dei job attuali che momorizzeremo in crontab_new
        #!/bin/bash
        crontab -l > crontab_new

        #metteremo in coda il nuovo job alla copia della lista     precedentemente creata e la sovvrascriviamo all'originale
        echo "30 0 * * * /home/baeldung/job.sh" >> crontab_new
        crontab crontab_new

    La stringa '/home/baeldung/job.sh' nella cronstring contiene il percorso dello script che dovrà eseguire il compito in quel periodo di tempo assegnato.

        #rimuoviamo la copia creata
        rm crontab_new
    
    3. Diamo al nostro script 'schedueleJob.sh' i permessi di esecuzione e lo runniamo

        chmod +x /home/baeldung/myScript.sh
        ./myScript.sh

    Se ora andiamo a controllare con l'istruzione 'crontab -l' avremo in lista tutti i job precedentemente schedulati più il nostro nuovo job.